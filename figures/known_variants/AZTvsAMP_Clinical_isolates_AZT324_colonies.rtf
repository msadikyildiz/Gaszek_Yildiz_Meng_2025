{\rtf1\ansi\ansicpg1252\cocoartf2822
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red157\green0\blue210;\red255\green255\blue255;\red0\green0\blue0;
\red15\green112\blue1;\red144\green1\blue18;\red0\green0\blue109;\red19\green118\blue70;\red101\green76\blue29;
\red0\green0\blue255;\red32\green108\blue135;\red230\green0\blue6;}
{\*\expandedcolortbl;;\cssrgb\c68627\c0\c85882;\cssrgb\c100000\c100000\c100000;\cssrgb\c0\c0\c0;
\cssrgb\c0\c50196\c0;\cssrgb\c63922\c8235\c8235;\cssrgb\c0\c6275\c50196;\cssrgb\c3529\c52549\c34510;\cssrgb\c47451\c36863\c14902;
\cssrgb\c0\c0\c100000;\cssrgb\c14902\c49804\c60000;\cssrgb\c93333\c0\c0;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 import\cf0 \strokec4  pandas \cf2 \strokec2 as\cf0 \strokec4  pd\cb1 \
\cf2 \cb3 \strokec2 import\cf0 \strokec4  matplotlib.pyplot \cf2 \strokec2 as\cf0 \strokec4  plt\cb1 \
\cf2 \cb3 \strokec2 import\cf0 \strokec4  numpy \cf2 \strokec2 as\cf0 \strokec4  np\cb1 \
\cf2 \cb3 \strokec2 from\cf0 \strokec4  matplotlib.colors \cf2 \strokec2 import\cf0 \strokec4  LogNorm\cb1 \
\cf2 \cb3 \strokec2 from\cf0 \strokec4  matplotlib \cf2 \strokec2 import\cf0 \strokec4  font_manager\cb1 \
\cf2 \cb3 \strokec2 from\cf0 \strokec4  pathlib \cf2 \strokec2 import\cf0 \strokec4  Path\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 # Load Arial font\cf0 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb3 font_path = \cf6 \strokec6 '/project/greencenter/Toprak_lab/shared/plategig/projects/Ilona/CMLdata/arial/Arial.ttf'\cf0 \cb1 \strokec4 \
\cb3 arial_font = font_manager.FontProperties(\cf7 \strokec7 fname\cf0 \strokec4 =font_path)\cb1 \
\cb3 plt.rcParams[\cf6 \strokec6 'font.family'\cf0 \strokec4 ] = arial_font.get_name()\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 # Define PROJECT_PATH\cf0 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb3 PROJECT_PATH = Path(\cf6 \strokec6 "/project/greencenter/Toprak_lab/shared/plategig/projects/Ilona"\cf0 \strokec4 )\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 # Load datasets\cf0 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb3 amp_df = pd.read_csv(PROJECT_PATH / \cf6 \strokec6 "CMLdata/Epistasis_Combined_AMP_auc_10_20250213.csv"\cf0 \strokec4 , \cf7 \strokec7 index_col\cf0 \strokec4 =\cf8 \strokec8 0\cf0 \strokec4 )\cb1 \
\cb3 azt_df = pd.read_csv(PROJECT_PATH / \cf6 \strokec6 "CMLdata/Epistasis_Combined_AZT_auc_10_20250213.csv"\cf0 \strokec4 , \cf7 \strokec7 index_col\cf0 \strokec4 =\cf8 \strokec8 0\cf0 \strokec4 )\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 # Load the encoded variants\cf0 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb3 clinical_variants = pd.read_csv(\cf6 \strokec6 "/project/greencenter/Toprak_lab/shared/plategig/projects/Ilona/spreadsheets_out/encoded_variants.csv"\cf0 \strokec4 )\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 # Check how many encoded sequences match with the genotypes in epistasis datasets\cf0 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb3 matches_in_amp = amp_df[amp_df[\cf6 \strokec6 "Genotype"\cf0 \strokec4 ].isin(clinical_variants[\cf6 \strokec6 "Encoded_Sequence"\cf0 \strokec4 ])]\cb1 \
\cb3 matches_in_azt = azt_df[azt_df[\cf6 \strokec6 "Genotype"\cf0 \strokec4 ].isin(clinical_variants[\cf6 \strokec6 "Encoded_Sequence"\cf0 \strokec4 ])]\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf9 \cb3 \strokec9 print\cf0 \strokec4 (\cf10 \strokec10 f\cf6 \strokec6 "Clinical sequences matching in AMP dataset: \cf10 \strokec10 \{\cf9 \strokec9 len\cf0 \strokec4 (matches_in_amp)\cf10 \strokec10 \}\cf6 \strokec6 "\cf0 \strokec4 )\cb1 \
\cf9 \cb3 \strokec9 print\cf0 \strokec4 (\cf10 \strokec10 f\cf6 \strokec6 "Clinical sequences matching in AZT dataset: \cf10 \strokec10 \{\cf9 \strokec9 len\cf0 \strokec4 (matches_in_azt)\cf10 \strokec10 \}\cf6 \strokec6 "\cf0 \strokec4 )\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 # Get genotypes that match in both datasets\cf0 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb3 common_genotypes = \cf11 \strokec11 set\cf0 \strokec4 (matches_in_amp[\cf6 \strokec6 "Genotype"\cf0 \strokec4 ]).intersection(\cf11 \strokec11 set\cf0 \strokec4 (matches_in_azt[\cf6 \strokec6 "Genotype"\cf0 \strokec4 ]))\cb1 \
\pard\pardeftab720\partightenfactor0
\cf9 \cb3 \strokec9 print\cf0 \strokec4 (\cf10 \strokec10 f\cf6 \strokec6 "Clinical sequences matching in both datasets: \cf10 \strokec10 \{\cf9 \strokec9 len\cf0 \strokec4 (common_genotypes)\cf10 \strokec10 \}\cf6 \strokec6 "\cf0 \strokec4 )\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 # Create merged dataset with fitness values for matches\cf0 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb3 clinical_matches = pd.DataFrame(\cf7 \strokec7 columns\cf0 \strokec4 =[\cf6 \strokec6 "Variant"\cf0 \strokec4 , \cf6 \strokec6 "Genotype"\cf0 \strokec4 , \cf6 \strokec6 "Fitness_AMP"\cf0 \strokec4 , \cf6 \strokec6 "Fitness_AZT"\cf0 \strokec4 ])\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 for\cf0 \strokec4  genotype \cf2 \strokec2 in\cf0 \strokec4  common_genotypes:\cb1 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb3     \cf5 \strokec5 # Get the variant name\cf0 \cb1 \strokec4 \
\cb3     variant_name = clinical_variants.loc[clinical_variants[\cf6 \strokec6 "Encoded_Sequence"\cf0 \strokec4 ] == genotype, \cf6 \strokec6 "Variant"\cf0 \strokec4 ].iloc[\cf8 \strokec8 0\cf0 \strokec4 ]\cb1 \
\cb3     \cb1 \
\cb3     \cf5 \strokec5 # Get fitness values\cf0 \cb1 \strokec4 \
\cb3     amp_fitness = amp_df.loc[amp_df[\cf6 \strokec6 "Genotype"\cf0 \strokec4 ] == genotype, \cf6 \strokec6 "Fitness"\cf0 \strokec4 ].iloc[\cf8 \strokec8 0\cf0 \strokec4 ]\cb1 \
\cb3     azt_fitness = azt_df.loc[azt_df[\cf6 \strokec6 "Genotype"\cf0 \strokec4 ] == genotype, \cf6 \strokec6 "Fitness"\cf0 \strokec4 ].iloc[\cf8 \strokec8 0\cf0 \strokec4 ]\cb1 \
\cb3     \cb1 \
\cb3     \cf5 \strokec5 # Create a new row and append it\cf0 \cb1 \strokec4 \
\cb3     new_row = pd.DataFrame(\{\cb1 \
\cb3         \cf6 \strokec6 "Variant"\cf0 \strokec4 : [variant_name],\cb1 \
\cb3         \cf6 \strokec6 "Genotype"\cf0 \strokec4 : [genotype],\cb1 \
\cb3         \cf6 \strokec6 "Fitness_AMP"\cf0 \strokec4 : [amp_fitness],\cb1 \
\cb3         \cf6 \strokec6 "Fitness_AZT"\cf0 \strokec4 : [azt_fitness]\cb1 \
\cb3     \})\cb1 \
\cb3     clinical_matches = pd.concat([clinical_matches, new_row], \cf7 \strokec7 ignore_index\cf0 \strokec4 =\cf10 \strokec10 True\cf0 \strokec4 )\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf9 \cb3 \strokec9 print\cf0 \strokec4 (\cf6 \strokec6 "\cf12 \strokec12 \\n\cf6 \strokec6 Matched clinical isolates (first 5):"\cf0 \strokec4 )\cb1 \
\cf9 \cb3 \strokec9 print\cf0 \strokec4 (clinical_matches.head())\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf10 \cb3 \strokec10 def\cf0 \strokec4  \cf9 \strokec9 plot_fitness_AMP_vs_AZT\cf0 \strokec4 (\cf7 \strokec7 amp_fitness\cf0 \strokec4 , \cf7 \strokec7 azt_fitness\cf0 \strokec4 , \cf7 \strokec7 highlight_df\cf0 \strokec4 =\cf10 \strokec10 None\cf0 \strokec4 ):\cb1 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb3     fig = plt.figure(\cf7 \strokec7 figsize\cf0 \strokec4 =(\cf8 \strokec8 6\cf0 \strokec4 , \cf8 \strokec8 6\cf0 \strokec4 ))\cb1 \
\cb3     gs = fig.add_gridspec(\cf8 \strokec8 2\cf0 \strokec4 , \cf8 \strokec8 2\cf0 \strokec4 , \cf7 \strokec7 width_ratios\cf0 \strokec4 =[\cf8 \strokec8 3\cf0 \strokec4 , \cf8 \strokec8 1\cf0 \strokec4 ], \cf7 \strokec7 height_ratios\cf0 \strokec4 =[\cf8 \strokec8 1\cf0 \strokec4 , \cf8 \strokec8 3\cf0 \strokec4 ],\cb1 \
\cb3                           \cf7 \strokec7 left\cf0 \strokec4 =\cf8 \strokec8 0.1\cf0 \strokec4 , \cf7 \strokec7 right\cf0 \strokec4 =\cf8 \strokec8 0.9\cf0 \strokec4 , \cf7 \strokec7 bottom\cf0 \strokec4 =\cf8 \strokec8 0.1\cf0 \strokec4 , \cf7 \strokec7 top\cf0 \strokec4 =\cf8 \strokec8 0.9\cf0 \strokec4 ,\cb1 \
\cb3                           \cf7 \strokec7 wspace\cf0 \strokec4 =\cf8 \strokec8 0.05\cf0 \strokec4 , \cf7 \strokec7 hspace\cf0 \strokec4 =\cf8 \strokec8 0.05\cf0 \strokec4 )\cb1 \
\cb3     \cb1 \
\cb3     ax = fig.add_subplot(gs[\cf8 \strokec8 1\cf0 \strokec4 , \cf8 \strokec8 0\cf0 \strokec4 ])\cb1 \
\cb3     amp_bins = np.linspace(-\cf8 \strokec8 0.05\cf0 \strokec4 , \cf8 \strokec8 1.15\cf0 \strokec4 , \cf8 \strokec8 50\cf0 \strokec4 )\cb1 \
\cb3     azt_bins = np.linspace(-\cf8 \strokec8 1\cf0 \strokec4 , \cf8 \strokec8 6.5\cf0 \strokec4 , \cf8 \strokec8 50\cf0 \strokec4 )\cb1 \
\cb3     hist, xedges, yedges, img = ax.hist2d(\cb1 \
\cb3         amp_fitness, azt_fitness, \cf7 \strokec7 bins\cf0 \strokec4 =[amp_bins, azt_bins],\cb1 \
\cb3         \cf7 \strokec7 cmap\cf0 \strokec4 =\cf6 \strokec6 'BuPu'\cf0 \strokec4 , \cf7 \strokec7 norm\cf0 \strokec4 =LogNorm()\cb1 \
\cb3     )\cb1 \
\cb3     \cb1 \
\cb3     \cf5 \strokec5 # Add extra variants with dummy fitness values\cf0 \cb1 \strokec4 \
\cb3     extra_variants = \{\cb1 \
\cb3         \cf6 \strokec6 'c1.1'\cf0 \strokec4 : \{\cf6 \strokec6 'sequence'\cf0 \strokec4 : \cf6 \strokec6 'LQMKNTTAGKRTRN'\cf0 \strokec4 , \cf6 \strokec6 'amp_fitness'\cf0 \strokec4 : \cf8 \strokec8 0.75\cf0 \strokec4 , \cf6 \strokec6 'azt_fitness'\cf0 \strokec4 : \cf8 \strokec8 2.8\cf0 \strokec4 \},\cb1 \
\cb3         \cf6 \strokec6 'c1.2'\cf0 \strokec4 : \{\cf6 \strokec6 'sequence'\cf0 \strokec4 : \cf6 \strokec6 'PQMKNMAGKRMRN'\cf0 \strokec4 , \cf6 \strokec6 'amp_fitness'\cf0 \strokec4 : \cf8 \strokec8 0.82\cf0 \strokec4 , \cf6 \strokec6 'azt_fitness'\cf0 \strokec4 : \cf8 \strokec8 3.2\cf0 \strokec4 \},\cb1 \
\cb3         \cf6 \strokec6 'c1.3'\cf0 \strokec4 : \{\cf6 \strokec6 'sequence'\cf0 \strokec4 : \cf6 \strokec6 'LKMKSMAGKRMRN'\cf0 \strokec4 , \cf6 \strokec6 'amp_fitness'\cf0 \strokec4 : \cf8 \strokec8 0.9\cf0 \strokec4 , \cf6 \strokec6 'azt_fitness'\cf0 \strokec4 : \cf8 \strokec8 3.5\cf0 \strokec4 \},\cb1 \
\cb3         \cf6 \strokec6 'c2.1'\cf0 \strokec4 : \{\cf6 \strokec6 'sequence'\cf0 \strokec4 : \cf6 \strokec6 'LQMKNMAGKRMRN'\cf0 \strokec4 , \cf6 \strokec6 'amp_fitness'\cf0 \strokec4 : \cf8 \strokec8 0.85\cf0 \strokec4 , \cf6 \strokec6 'azt_fitness'\cf0 \strokec4 : \cf8 \strokec8 4.0\cf0 \strokec4 \},\cb1 \
\cb3         \cf6 \strokec6 'c2.2'\cf0 \strokec4 : \{\cf6 \strokec6 'sequence'\cf0 \strokec4 : \cf6 \strokec6 'LKMNMAGKRTRN'\cf0 \strokec4 , \cf6 \strokec6 'amp_fitness'\cf0 \strokec4 : \cf8 \strokec8 0.78\cf0 \strokec4 , \cf6 \strokec6 'azt_fitness'\cf0 \strokec4 : \cf8 \strokec8 4.3\cf0 \strokec4 \},\cb1 \
\cb3         \cf6 \strokec6 'c2.3'\cf0 \strokec4 : \{\cf6 \strokec6 'sequence'\cf0 \strokec4 : \cf6 \strokec6 'LKMNTAGKRTRN'\cf0 \strokec4 , \cf6 \strokec6 'amp_fitness'\cf0 \strokec4 : \cf8 \strokec8 0.95\cf0 \strokec4 , \cf6 \strokec6 'azt_fitness'\cf0 \strokec4 : \cf8 \strokec8 4.7\cf0 \strokec4 \},\cb1 \
\cb3         \cf6 \strokec6 'c3.1'\cf0 \strokec4 : \{\cf6 \strokec6 'sequence'\cf0 \strokec4 : \cf6 \strokec6 'PQMKNTAGKRTRN'\cf0 \strokec4 , \cf6 \strokec6 'amp_fitness'\cf0 \strokec4 : \cf8 \strokec8 0.88\cf0 \strokec4 , \cf6 \strokec6 'azt_fitness'\cf0 \strokec4 : \cf8 \strokec8 5.0\cf0 \strokec4 \}\cb1 \
\cb3     \}\cb1 \
\cb3     \cb1 \
\cb3     \cf5 \strokec5 # Add yellow asterisks for clinical isolates if we have data\cf0 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 # Plot clinical isolates FIRST so X markers appear on top\cf0 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 if\cf0 \strokec4  highlight_df \cf10 \strokec10 is\cf0 \strokec4  \cf10 \strokec10 not\cf0 \strokec4  \cf10 \strokec10 None\cf0 \strokec4  \cf10 \strokec10 and\cf0 \strokec4  \cf10 \strokec10 not\cf0 \strokec4  highlight_df.empty:\cb1 \
\cb3         \cf9 \strokec9 print\cf0 \strokec4 (\cf10 \strokec10 f\cf6 \strokec6 "Plotting \cf10 \strokec10 \{\cf9 \strokec9 len\cf0 \strokec4 (highlight_df)\cf10 \strokec10 \}\cf6 \strokec6  clinical isolates"\cf0 \strokec4 )\cb1 \
\cb3         \cf9 \strokec9 print\cf0 \strokec4 (\cf6 \strokec6 "Clinical isolates data:"\cf0 \strokec4 )\cb1 \
\cb3         \cf9 \strokec9 print\cf0 \strokec4 (highlight_df[[\cf6 \strokec6 "Variant"\cf0 \strokec4 , \cf6 \strokec6 "Fitness_AMP"\cf0 \strokec4 , \cf6 \strokec6 "Fitness_AZT"\cf0 \strokec4 ]].sort_values(\cf7 \strokec7 by\cf0 \strokec4 =\cf6 \strokec6 "Fitness_AZT"\cf0 \strokec4 , \cf7 \strokec7 ascending\cf0 \strokec4 =\cf10 \strokec10 False\cf0 \strokec4 ))\cb1 \
\cb3         \cb1 \
\cb3         ax.plot(\cb1 \
\cb3             highlight_df[\cf6 \strokec6 "Fitness_AMP"\cf0 \strokec4 ],\cb1 \
\cb3             highlight_df[\cf6 \strokec6 "Fitness_AZT"\cf0 \strokec4 ],\cb1 \
\cb3             \cf7 \strokec7 marker\cf0 \strokec4 =\cf6 \strokec6 '*'\cf0 \strokec4 ,\cb1 \
\cb3             \cf7 \strokec7 linestyle\cf0 \strokec4 =\cf6 \strokec6 'none'\cf0 \strokec4 ,\cb1 \
\cb3             \cf7 \strokec7 markerfacecolor\cf0 \strokec4 =\cf6 \strokec6 'yellow'\cf0 \strokec4 ,\cb1 \
\cb3             \cf7 \strokec7 markeredgecolor\cf0 \strokec4 =\cf6 \strokec6 'black'\cf0 \strokec4 ,\cb1 \
\cb3             \cf7 \strokec7 markersize\cf0 \strokec4 =\cf8 \strokec8 12\cf0 \strokec4 ,\cb1 \
\cb3             \cf7 \strokec7 markeredgewidth\cf0 \strokec4 =\cf8 \strokec8 0.5\cf0 \strokec4 ,\cb1 \
\cb3             \cf7 \strokec7 label\cf0 \strokec4 =\cf6 \strokec6 'Clinical Isolates'\cf0 \cb1 \strokec4 \
\cb3         )\cb1 \
\cb3     \cb1 \
\cb3     \cf5 \strokec5 # Plot extra variants with green stars\cf0 \cb1 \strokec4 \
\cb3     extra_amp_fitness = [extra_variants[v][\cf6 \strokec6 'amp_fitness'\cf0 \strokec4 ] \cf2 \strokec2 for\cf0 \strokec4  v \cf2 \strokec2 in\cf0 \strokec4  extra_variants]\cb1 \
\cb3     extra_azt_fitness = [extra_variants[v][\cf6 \strokec6 'azt_fitness'\cf0 \strokec4 ] \cf2 \strokec2 for\cf0 \strokec4  v \cf2 \strokec2 in\cf0 \strokec4  extra_variants]\cb1 \
\cb3     extra_labels = \cf11 \strokec11 list\cf0 \strokec4 (extra_variants.keys())\cb1 \
\cb3     \cb1 \
\cb3     ax.plot(\cb1 \
\cb3         extra_amp_fitness,\cb1 \
\cb3         extra_azt_fitness,\cb1 \
\cb3         \cf7 \strokec7 marker\cf0 \strokec4 =\cf6 \strokec6 '*'\cf0 \strokec4 ,\cb1 \
\cb3         \cf7 \strokec7 linestyle\cf0 \strokec4 =\cf6 \strokec6 'none'\cf0 \strokec4 ,\cb1 \
\cb3         \cf7 \strokec7 markerfacecolor\cf0 \strokec4 =\cf6 \strokec6 'green'\cf0 \strokec4 ,\cb1 \
\cb3         \cf7 \strokec7 markeredgecolor\cf0 \strokec4 =\cf6 \strokec6 'black'\cf0 \strokec4 ,\cb1 \
\cb3         \cf7 \strokec7 markersize\cf0 \strokec4 =\cf8 \strokec8 12\cf0 \strokec4 ,\cb1 \
\cb3         \cf7 \strokec7 markeredgewidth\cf0 \strokec4 =\cf8 \strokec8 0.5\cf0 \strokec4 ,\cb1 \
\cb3         \cf7 \strokec7 label\cf0 \strokec4 =\cf6 \strokec6 'New Variants'\cf0 \cb1 \strokec4 \
\cb3     )\cb1 \
\cb3     \cb1 \
\cb3     \cf5 \strokec5 # Add annotations for the extra variants\cf0 \cb1 \strokec4 \
\cb3     \cf2 \strokec2 for\cf0 \strokec4  i, variant \cf2 \strokec2 in\cf0 \strokec4  \cf9 \strokec9 enumerate\cf0 \strokec4 (extra_labels):\cb1 \
\cb3         ax.annotate(\cb1 \
\cb3             variant,\cb1 \
\cb3             (extra_amp_fitness[i], extra_azt_fitness[i]),\cb1 \
\cb3             \cf7 \strokec7 xytext\cf0 \strokec4 =(\cf8 \strokec8 5\cf0 \strokec4 , \cf8 \strokec8 5\cf0 \strokec4 ),\cb1 \
\cb3             \cf7 \strokec7 textcoords\cf0 \strokec4 =\cf6 \strokec6 'offset points'\cf0 \strokec4 ,\cb1 \
\cb3             \cf7 \strokec7 fontsize\cf0 \strokec4 =\cf8 \strokec8 6\cf0 \strokec4 ,\cb1 \
\cb3             \cf7 \strokec7 color\cf0 \strokec4 =\cf6 \strokec6 'darkgreen'\cf0 \cb1 \strokec4 \
\cb3         )\cb1 \
\cb3     \cb1 \
\cb3     \cf5 \strokec5 # Plot X markers AFTER clinical isolates so they appear on top\cf0 \cb1 \strokec4 \
\cb3     ax.plot(\cf8 \strokec8 0\cf0 \strokec4 , \cf8 \strokec8 0\cf0 \strokec4 , \cf6 \strokec6 'x'\cf0 \strokec4 , \cf7 \strokec7 color\cf0 \strokec4 =\cf6 \strokec6 'blue'\cf0 \strokec4 , \cf7 \strokec7 markersize\cf0 \strokec4 =\cf8 \strokec8 10\cf0 \strokec4 , \cf7 \strokec7 markeredgewidth\cf0 \strokec4 =\cf8 \strokec8 2\cf0 \strokec4 , \cf7 \strokec7 label\cf0 \strokec4 =\cf6 \strokec6 'TEM-1$^\cf10 \strokec10 \{dead\}\cf6 \strokec6 $'\cf0 \strokec4 )\cb1 \
\cb3     ax.plot(\cf8 \strokec8 1\cf0 \strokec4 , \cf8 \strokec8 1\cf0 \strokec4 , \cf6 \strokec6 'x'\cf0 \strokec4 , \cf7 \strokec7 color\cf0 \strokec4 =\cf6 \strokec6 'black'\cf0 \strokec4 , \cf7 \strokec7 markersize\cf0 \strokec4 =\cf8 \strokec8 10\cf0 \strokec4 , \cf7 \strokec7 markeredgewidth\cf0 \strokec4 =\cf8 \strokec8 2\cf0 \strokec4 , \cf7 \strokec7 label\cf0 \strokec4 =\cf6 \strokec6 'TEM-1$^\cf10 \strokec10 \{WT\}\cf6 \strokec6 $'\cf0 \strokec4 )\cb1 \
\cb3     \cb1 \
\cb3     ax.legend(\cf7 \strokec7 frameon\cf0 \strokec4 =\cf10 \strokec10 False\cf0 \strokec4 , \cf7 \strokec7 fontsize\cf0 \strokec4 =\cf8 \strokec8 8\cf0 \strokec4 , \cf7 \strokec7 loc\cf0 \strokec4 =\cf6 \strokec6 'upper left'\cf0 \strokec4 )\cb1 \
\
\cb3     cbar_ax = fig.add_axes([\cf8 \strokec8 0.9\cf0 \strokec4 , \cf8 \strokec8 0.37\cf0 \strokec4 , \cf8 \strokec8 0.03\cf0 \strokec4 , \cf8 \strokec8 0.3\cf0 \strokec4 ])\cb1 \
\cb3     fig.colorbar(img, \cf7 \strokec7 cax\cf0 \strokec4 =cbar_ax)\cb1 \
\
\cb3     ax_top = fig.add_subplot(gs[\cf8 \strokec8 0\cf0 \strokec4 , \cf8 \strokec8 0\cf0 \strokec4 ], \cf7 \strokec7 sharex\cf0 \strokec4 =ax)\cb1 \
\cb3     ax_top.hist(amp_fitness, \cf7 \strokec7 bins\cf0 \strokec4 =amp_bins, \cf7 \strokec7 color\cf0 \strokec4 =\cf6 \strokec6 'gray'\cf0 \strokec4 , \cf7 \strokec7 alpha\cf0 \strokec4 =\cf8 \strokec8 0.95\cf0 \strokec4 , \cf7 \strokec7 edgecolor\cf0 \strokec4 =\cf6 \strokec6 'black'\cf0 \strokec4 , \cf7 \strokec7 linewidth\cf0 \strokec4 =\cf8 \strokec8 0.5\cf0 \strokec4 )\cb1 \
\cb3     ax_top.set_ylim(\cf8 \strokec8 0.1\cf0 \strokec4 , ax_top.get_ylim()[\cf8 \strokec8 1\cf0 \strokec4 ])\cb1 \
\cb3     ax_top.tick_params(\cf7 \strokec7 labelleft\cf0 \strokec4 =\cf10 \strokec10 False\cf0 \strokec4 , \cf7 \strokec7 labelbottom\cf0 \strokec4 =\cf10 \strokec10 False\cf0 \strokec4 )\cb1 \
\cb3     ax_top.set_yticks([])\cb1 \
\
\cb3     ax_right = fig.add_subplot(gs[\cf8 \strokec8 1\cf0 \strokec4 , \cf8 \strokec8 1\cf0 \strokec4 ], \cf7 \strokec7 sharey\cf0 \strokec4 =ax)\cb1 \
\cb3     ax_right.hist(azt_fitness, \cf7 \strokec7 bins\cf0 \strokec4 =azt_bins, \cf7 \strokec7 orientation\cf0 \strokec4 =\cf6 \strokec6 'horizontal'\cf0 \strokec4 , \cf7 \strokec7 color\cf0 \strokec4 =\cf6 \strokec6 'hotpink'\cf0 \strokec4 , \cf7 \strokec7 alpha\cf0 \strokec4 =\cf8 \strokec8 0.95\cf0 \strokec4 , \cf7 \strokec7 edgecolor\cf0 \strokec4 =\cf6 \strokec6 'black'\cf0 \strokec4 , \cf7 \strokec7 linewidth\cf0 \strokec4 =\cf8 \strokec8 0.5\cf0 \strokec4 )\cb1 \
\cb3     ax_right.set_xlim(\cf8 \strokec8 0.1\cf0 \strokec4 , ax_right.get_xlim()[\cf8 \strokec8 1\cf0 \strokec4 ])\cb1 \
\cb3     ax_right.tick_params(\cf7 \strokec7 labelleft\cf0 \strokec4 =\cf10 \strokec10 False\cf0 \strokec4 , \cf7 \strokec7 labelbottom\cf0 \strokec4 =\cf10 \strokec10 False\cf0 \strokec4 )\cb1 \
\cb3     ax_right.set_xticks([])\cb1 \
\
\cb3     ax.set_xlabel(\cf6 \strokec6 'Fitness$_\cf10 \strokec10 \{global\}\cf6 \strokec6 $ in Ampicillin'\cf0 \strokec4 , \cf7 \strokec7 fontsize\cf0 \strokec4 =\cf8 \strokec8 12\cf0 \strokec4 , \cf7 \strokec7 labelpad\cf0 \strokec4 =\cf8 \strokec8 3\cf0 \strokec4 , \cf7 \strokec7 fontname\cf0 \strokec4 =\cf6 \strokec6 'Arial'\cf0 \strokec4 )\cb1 \
\cb3     ax.set_ylabel(\cf6 \strokec6 'Fitness$_\cf10 \strokec10 \{global\}\cf6 \strokec6 $ in Aztreonam'\cf0 \strokec4 , \cf7 \strokec7 fontsize\cf0 \strokec4 =\cf8 \strokec8 12\cf0 \strokec4 , \cf7 \strokec7 labelpad\cf0 \strokec4 =\cf8 \strokec8 1\cf0 \strokec4 , \cf7 \strokec7 fontname\cf0 \strokec4 =\cf6 \strokec6 'Arial'\cf0 \strokec4 )\cb1 \
\
\cb3     amp_ticks = [\cf8 \strokec8 0\cf0 \strokec4 , \cf8 \strokec8 0.2\cf0 \strokec4 , \cf8 \strokec8 0.4\cf0 \strokec4 , \cf8 \strokec8 0.6\cf0 \strokec4 , \cf8 \strokec8 0.8\cf0 \strokec4 , \cf8 \strokec8 1.0\cf0 \strokec4 , \cf8 \strokec8 1.2\cf0 \strokec4 ]\cb1 \
\cb3     azt_ticks = [\cf8 \strokec8 0\cf0 \strokec4 , \cf8 \strokec8 1\cf0 \strokec4 , \cf8 \strokec8 2\cf0 \strokec4 , \cf8 \strokec8 3\cf0 \strokec4 , \cf8 \strokec8 4\cf0 \strokec4 , \cf8 \strokec8 5\cf0 \strokec4 , \cf8 \strokec8 6\cf0 \strokec4 , \cf8 \strokec8 7\cf0 \strokec4 ]\cb1 \
\cb3     ax.set_xticks(amp_ticks)\cb1 \
\cb3     ax.set_xticklabels(amp_ticks, \cf7 \strokec7 rotation\cf0 \strokec4 =\cf8 \strokec8 0\cf0 \strokec4 , \cf7 \strokec7 fontsize\cf0 \strokec4 =\cf8 \strokec8 8\cf0 \strokec4 , \cf7 \strokec7 fontname\cf0 \strokec4 =\cf6 \strokec6 'Arial'\cf0 \strokec4 )\cb1 \
\cb3     ax.set_yticks(azt_ticks)\cb1 \
\cb3     ax.set_yticklabels(azt_ticks, \cf7 \strokec7 rotation\cf0 \strokec4 =\cf8 \strokec8 0\cf0 \strokec4 , \cf7 \strokec7 fontsize\cf0 \strokec4 =\cf8 \strokec8 8\cf0 \strokec4 , \cf7 \strokec7 fontname\cf0 \strokec4 =\cf6 \strokec6 'Arial'\cf0 \strokec4 )\cb1 \
\cb3     \cb1 \
\cb3     ax.plot([-\cf8 \strokec8 0.1\cf0 \strokec4 , \cf8 \strokec8 1.2\cf0 \strokec4 ], [-\cf8 \strokec8 0.1\cf0 \strokec4 , \cf8 \strokec8 1.2\cf0 \strokec4 ], \cf6 \strokec6 'k--'\cf0 \strokec4 , \cf7 \strokec7 lw\cf0 \strokec4 =\cf8 \strokec8 1\cf0 \strokec4 , \cf7 \strokec7 alpha\cf0 \strokec4 =\cf8 \strokec8 0.95\cf0 \strokec4 )\cb1 \
\cb3     ax.set_xlim(-\cf8 \strokec8 0.05\cf0 \strokec4 , \cf8 \strokec8 1.1\cf0 \strokec4 )\cb1 \
\cb3     ax.set_ylim(-\cf8 \strokec8 0.5\cf0 \strokec4 , \cf8 \strokec8 8\cf0 \strokec4 )\cb1 \
\
\cb3     \cf5 \strokec5 # Get maximum counts from both histograms for setting common y-limit\cf0 \cb1 \strokec4 \
\cb3     top_counts, _ = np.histogram(amp_fitness, \cf7 \strokec7 bins\cf0 \strokec4 =amp_bins)\cb1 \
\cb3     right_counts, _ = np.histogram(azt_fitness, \cf7 \strokec7 bins\cf0 \strokec4 =azt_bins)\cb1 \
\cb3     max_count = \cf9 \strokec9 max\cf0 \strokec4 (np.max(top_counts), np.max(right_counts))\cb1 \
\cb3     \cb1 \
\cb3     \cf5 \strokec5 # Update y-limit for top histogram and x-limit for right histogram\cf0 \cb1 \strokec4 \
\cb3     ax_top.set_ylim(\cf8 \strokec8 0.1\cf0 \strokec4 , max_count * \cf8 \strokec8 1.01\cf0 \strokec4 )\cb1 \
\cb3     ax_right.set_xlim(\cf8 \strokec8 0.1\cf0 \strokec4 , max_count * \cf8 \strokec8 1.01\cf0 \strokec4 )\cb1 \
\
\cb3     ax_top.spines[\cf6 \strokec6 'top'\cf0 \strokec4 ].set_visible(\cf10 \strokec10 False\cf0 \strokec4 )\cb1 \
\cb3     ax_top.spines[\cf6 \strokec6 'right'\cf0 \strokec4 ].set_visible(\cf10 \strokec10 False\cf0 \strokec4 )\cb1 \
\cb3     ax_top.spines[\cf6 \strokec6 'left'\cf0 \strokec4 ].set_visible(\cf10 \strokec10 False\cf0 \strokec4 )\cb1 \
\cb3     ax_right.spines[\cf6 \strokec6 'top'\cf0 \strokec4 ].set_visible(\cf10 \strokec10 False\cf0 \strokec4 )\cb1 \
\cb3     ax_right.spines[\cf6 \strokec6 'right'\cf0 \strokec4 ].set_visible(\cf10 \strokec10 False\cf0 \strokec4 )\cb1 \
\cb3     ax_right.spines[\cf6 \strokec6 'bottom'\cf0 \strokec4 ].set_visible(\cf10 \strokec10 False\cf0 \strokec4 )\cb1 \
\cb3     \cb1 \
\cb3     plt.savefig(PROJECT_PATH / \cf6 \strokec6 "figures/Fitness_AMP_vs_AZT_with_all_variants.svg"\cf0 \strokec4 , \cb1 \
\cb3                 \cf7 \strokec7 dpi\cf0 \strokec4 =\cf8 \strokec8 1200\cf0 \strokec4 , \cf7 \strokec7 bbox_inches\cf0 \strokec4 =\cf6 \strokec6 'tight'\cf0 \strokec4 )\cb1 \
\cb3     plt.show()\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 # Run the analysis\cf0 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf10 \cb3 \strokec10 def\cf0 \strokec4  \cf9 \strokec9 analyze_clinical_isolates\cf0 \strokec4 (\cf7 \strokec7 clinical_matches\cf0 \strokec4 ):\cb1 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb3     \cf9 \strokec9 print\cf0 \strokec4 (\cf10 \strokec10 f\cf6 \strokec6 "\cf12 \strokec12 \\n\cf6 \strokec6 Analysis of \cf10 \strokec10 \{\cf9 \strokec9 len\cf0 \strokec4 (clinical_matches)\cf10 \strokec10 \}\cf6 \strokec6  clinical isolates:"\cf0 \strokec4 )\cb1 \
\cb3     \cb1 \
\cb3     \cf5 \strokec5 # Calculate statistics\cf0 \cb1 \strokec4 \
\cb3     amp_mean = clinical_matches[\cf6 \strokec6 "Fitness_AMP"\cf0 \strokec4 ].mean()\cb1 \
\cb3     azt_mean = clinical_matches[\cf6 \strokec6 "Fitness_AZT"\cf0 \strokec4 ].mean()\cb1 \
\cb3     amp_std = clinical_matches[\cf6 \strokec6 "Fitness_AMP"\cf0 \strokec4 ].std()\cb1 \
\cb3     azt_std = clinical_matches[\cf6 \strokec6 "Fitness_AZT"\cf0 \strokec4 ].std()\cb1 \
\cb3     \cb1 \
\cb3     \cf9 \strokec9 print\cf0 \strokec4 (\cf10 \strokec10 f\cf6 \strokec6 "Mean AMP fitness: \cf10 \strokec10 \{\cf0 \strokec4 amp_mean\cf10 \strokec10 :.3f\}\cf6 \strokec6  \'b1 \cf10 \strokec10 \{\cf0 \strokec4 amp_std\cf10 \strokec10 :.3f\}\cf6 \strokec6 "\cf0 \strokec4 )\cb1 \
\cb3     \cf9 \strokec9 print\cf0 \strokec4 (\cf10 \strokec10 f\cf6 \strokec6 "Mean AZT fitness: \cf10 \strokec10 \{\cf0 \strokec4 azt_mean\cf10 \strokec10 :.3f\}\cf6 \strokec6  \'b1 \cf10 \strokec10 \{\cf0 \strokec4 azt_std\cf10 \strokec10 :.3f\}\cf6 \strokec6 "\cf0 \strokec4 )\cb1 \
\cb3     \cb1 \
\cb3     \cf5 \strokec5 # Find isolates with high/low fitness in both drugs\cf0 \cb1 \strokec4 \
\cb3     dual_resistance = clinical_matches[(clinical_matches[\cf6 \strokec6 "Fitness_AMP"\cf0 \strokec4 ] > amp_mean) & \cb1 \
\cb3                                       (clinical_matches[\cf6 \strokec6 "Fitness_AZT"\cf0 \strokec4 ] > azt_mean)]\cb1 \
\cb3     dual_sensitivity = clinical_matches[(clinical_matches[\cf6 \strokec6 "Fitness_AMP"\cf0 \strokec4 ] < amp_mean) & \cb1 \
\cb3                                        (clinical_matches[\cf6 \strokec6 "Fitness_AZT"\cf0 \strokec4 ] < azt_mean)]\cb1 \
\cb3     \cb1 \
\cb3     \cf9 \strokec9 print\cf0 \strokec4 (\cf10 \strokec10 f\cf6 \strokec6 "Isolates with above-average fitness in both drugs: \cf10 \strokec10 \{\cf9 \strokec9 len\cf0 \strokec4 (dual_resistance)\cf10 \strokec10 \}\cf6 \strokec6 "\cf0 \strokec4 )\cb1 \
\cb3     \cf2 \strokec2 if\cf0 \strokec4  \cf9 \strokec9 len\cf0 \strokec4 (dual_resistance) > \cf8 \strokec8 0\cf0 \strokec4 :\cb1 \
\cb3         \cf9 \strokec9 print\cf0 \strokec4 (\cf6 \strokec6 "Top dual-resistant variants:"\cf0 \strokec4 )\cb1 \
\cb3         \cf2 \strokec2 for\cf0 \strokec4  i, row \cf2 \strokec2 in\cf0 \strokec4  dual_resistance.sort_values(\cf7 \strokec7 by\cf0 \strokec4 =[\cf6 \strokec6 'Fitness_AMP'\cf0 \strokec4 , \cf6 \strokec6 'Fitness_AZT'\cf0 \strokec4 ], \cf7 \strokec7 ascending\cf0 \strokec4 =\cf10 \strokec10 False\cf0 \strokec4 ).head(\cf8 \strokec8 5\cf0 \strokec4 ).iterrows():\cb1 \
\cb3             \cf9 \strokec9 print\cf0 \strokec4 (\cf10 \strokec10 f\cf6 \strokec6 "  \cf10 \strokec10 \{\cf0 \strokec4 row[\cf6 \strokec6 'Variant'\cf0 \strokec4 ]\cf10 \strokec10 \}\cf6 \strokec6 : AMP=\cf10 \strokec10 \{\cf0 \strokec4 row[\cf6 \strokec6 'Fitness_AMP'\cf0 \strokec4 ]\cf10 \strokec10 :.3f\}\cf6 \strokec6 , AZT=\cf10 \strokec10 \{\cf0 \strokec4 row[\cf6 \strokec6 'Fitness_AZT'\cf0 \strokec4 ]\cf10 \strokec10 :.3f\}\cf6 \strokec6 "\cf0 \strokec4 )\cb1 \
\cb3     \cb1 \
\cb3     \cf9 \strokec9 print\cf0 \strokec4 (\cf10 \strokec10 f\cf6 \strokec6 "Isolates with below-average fitness in both drugs: \cf10 \strokec10 \{\cf9 \strokec9 len\cf0 \strokec4 (dual_sensitivity)\cf10 \strokec10 \}\cf6 \strokec6 "\cf0 \strokec4 )\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 # Run the updated plot\cf0 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb3 plot_fitness_AMP_vs_AZT(\cb1 \
\cb3     amp_df[\cf6 \strokec6 "Fitness"\cf0 \strokec4 ],\cb1 \
\cb3     azt_df[\cf6 \strokec6 "Fitness"\cf0 \strokec4 ],\cb1 \
\cb3     clinical_matches\cb1 \
\cb3 )\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 # Analyze the clinical isolates\cf0 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb3 analyze_clinical_isolates(clinical_matches)\cb1 \
}